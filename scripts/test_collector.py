#!/usr/bin/env python3
"""
test_collector.py - Script para teste do Sentinel Collector

Este script testa o funcionamento do coletor enviando requisi√ß√µes de teste.

Autor: TriplePlay Team
Data: Maio 2025
"""

import os
import sys
import json
import time
import argparse
import requests

def parse_args():
    """Parse command line arguments"""
    parser = argparse.ArgumentParser(description="Testa o Sentinel Collector")
    parser.add_argument("--url", default="http://localhost:5000", help="URL do Sentinel Collector")
    parser.add_argument("--mikrotik", required=True, help="Endere√ßo IP do MikroTik")
    parser.add_argument("--user", required=True, help="Usu√°rio do MikroTik")
    parser.add_argument("--password", required=True, help="Senha do MikroTik")
    parser.add_argument("--target", default="8.8.8.8", help="IP alvo para teste de ping")
    parser.add_argument("--count", type=int, default=3, help="N√∫mero de pings")
    
    return parser.parse_args()

def check_health(url):
    """Verifica a disponibilidade do servi√ßo"""
    try:
        response = requests.get(f"{url}/health")
        if response.status_code == 200:
            print(f"‚úÖ Servi√ßo dispon√≠vel: {response.json()}")
            return True
        else:
            print(f"‚ùå Servi√ßo indispon√≠vel. C√≥digo: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Erro ao conectar com o servi√ßo: {str(e)}")
        return False

def get_version(url):
    """Obt√©m informa√ß√µes de vers√£o"""
    try:
        response = requests.get(f"{url}/version")
        if response.status_code == 200:
            print(f"‚ÑπÔ∏è Informa√ß√µes de vers√£o: {response.json()}")
            return True
        else:
            print(f"‚ùå Erro ao obter vers√£o. C√≥digo: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Erro ao obter vers√£o: {str(e)}")
        return False

def run_ping_test(url, mikrotik_host, mikrotik_user, mikrotik_password, target, count):
    """Executa um teste de ping"""
    print(f"üîÑ Executando teste de ping para {target} via {mikrotik_host}...")
    
    payload = {
        "mikrotik_host": mikrotik_host,
        "mikrotik_user": mikrotik_user,
        "mikrotik_password": mikrotik_password,
        "test_type": "ping",
        "target": target,
        "count": count
    }
    
    try:
        response = requests.post(f"{url}/test", json=payload, timeout=30)
        if response.status_code == 200:
            result = response.json()
            if result.get("status") == "success":
                ping_stats = result.get("ping_stats", {})
                print(f"‚úÖ Teste conclu√≠do com sucesso!")
                print(f"  - Pacotes enviados: {ping_stats.get('sent', 'N/A')}")
                print(f"  - Pacotes recebidos: {ping_stats.get('received', 'N/A')}")
                print(f"  - Perda de pacotes: {ping_stats.get('packet_loss', 'N/A')}%")
                print(f"  - RTT m√≠nimo: {ping_stats.get('min_rtt', 'N/A')}ms")
                print(f"  - RTT m√©dio: {ping_stats.get('avg_rtt', 'N/A')}ms")
                print(f"  - RTT m√°ximo: {ping_stats.get('max_rtt', 'N/A')}ms")
                print(f"  - Timestamp: {result.get('metadata', {}).get('timestamp', 'N/A')}")
                return True
            else:
                print(f"‚ùå Teste falhou: {result.get('message', 'Erro desconhecido')}")
                return False
        else:
            print(f"‚ùå Erro na requisi√ß√£o: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Erro ao executar teste: {str(e)}")
        return False

def main():
    """Fun√ß√£o principal"""
    args = parse_args()
    
    # Verifica sa√∫de do servi√ßo
    if not check_health(args.url):
        sys.exit(1)
    
    # Obt√©m informa√ß√µes de vers√£o
    get_version(args.url)
    
    # Executa teste de ping
    run_ping_test(
        args.url, 
        args.mikrotik, 
        args.user, 
        args.password, 
        args.target, 
        args.count
    )

if __name__ == "__main__":
    main()
